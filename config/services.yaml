# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/'
    exclude:
      - '../src/DependencyInjection/'
      - '../src/Entity/'
      - '../src/Kernel.php'
      - '../src/Tests/'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Controller\:
    resource: '../src/Controller/'
    tags: ['controller.service_arguments']

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones
  # * this is a decoration for the api plateform context builder
  # * this helps to oveeride the way a service work
  App\Serializer\UserContextBuilder:
    decorates: 'api_platform.serializer.context_builder'
    arguments: ['@App\Serializer\UserContextBuilder.inner']

# * property just determine the priority
  App\Serializer\UserAttributeNormalizer:
    arguments: ['@security.token_storage']
    tags:
      - {name: 'serializer.normalizer', property: 64}

# to register the custom logger as a service
  App\Security\UserConfirmationService:
    arguments:
      $logger: '@monolog.logger.token_confirmation'
